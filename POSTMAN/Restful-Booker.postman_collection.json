{
	"info": {
		"_postman_id": "ec4e264b-8214-431c-9a05-a9e70953f0bb",
		"name": "Restful-Booker",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "47554331"
	},
	"item": [
		{
			"name": "GET /booking (all IDs) ",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Check status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Response should be an array\r",
							"pm.test(\"Response is an array\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"// Save first booking ID into environment (to use later)\r",
							"var jsonData = pm.response.json();\r",
							"if (jsonData.length > 0) {\r",
							"    pm.environment.set(\"bookingId\", jsonData[0].bookingid || jsonData[0].bookingid || jsonData[0].bookingid);\r",
							"    // Some responses return as \"bookingid\" others \"bookingid\"\r",
							"    pm.environment.set(\"bookingId\", jsonData[0].bookingid || jsonData[0].bookingid || jsonData[0].bookingid);\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/booking?firstname=John&lastname=Smith",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking"
					],
					"query": [
						{
							"key": "firstname",
							"value": "John"
						},
						{
							"key": "lastname",
							"value": "Smith"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /booking by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body is JSON\", () => {\r",
							"  pm.response.to.be.withBody;\r",
							"  pm.response.to.be.json;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/booking/5",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"5"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST /auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Check status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Validate response has token\r",
							"pm.test(\"Response has token\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"token\");\r",
							"});\r",
							"\r",
							"// Save token in environment\r",
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"token\", jsonData.token);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\" : \"admin\",\r\n  \"password\" : \"password123\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST /booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"pm.test(\"Booking ID is present\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"bookingid\");\r",
							"});\r",
							"\r",
							"// Save bookingid to environment for later requests\r",
							"pm.environment.set(\"bookingid\", jsonData.bookingid);\r",
							"console.log(\"Booking created with ID:\", jsonData.bookingid);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"firstname\": \"Sowmya\",\r\n  \"lastname\": \"Tester\",\r\n  \"totalprice\": 111,\r\n  \"depositpaid\": true,\r\n  \"bookingdates\": {\r\n    \"checkin\": \"2025-08-01\",\r\n    \"checkout\": \"2025-08-10\"\r\n  },\r\n  \"additionalneeds\": \"Breakfast\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/booking",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT /booking/{id}",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.sendRequest({\r",
							"    url: pm.environment.get(\"base_url\") + \"/auth\",\r",
							"    method: \"POST\",\r",
							"    header: {\r",
							"        \"Content-Type\": \"application/json\"\r",
							"    },\r",
							"    body: {\r",
							"        mode: \"raw\",\r",
							"        raw: JSON.stringify({\r",
							"            \"username\": \"admin\",\r",
							"            \"password\": \"password123\"\r",
							"        })\r",
							"    }\r",
							"}, function (err, res) {\r",
							"    if (!err) {\r",
							"        let json = res.json();\r",
							"        if (json.token) {\r",
							"            pm.environment.set(\"authToken\", json.token);\r",
							"            console.log(\"New Token set: \" + json.token);\r",
							"        } else {\r",
							"            console.log(\"Auth token not found in response\");\r",
							"        }\r",
							"    } else {\r",
							"        console.log(\"Error fetching token: \" + err);\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains updated firstname\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.firstname).to.eql(\"Jane\"); \r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "token={{authToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"firstname\" : \"Jane\",\r\n  \"lastname\" : \"Doe\",\r\n  \"totalprice\" : 200,\r\n  \"depositpaid\" : false,\r\n  \"bookingdates\" : {\r\n    \"checkin\" : \"2025-09-01\",\r\n    \"checkout\" : \"2025-09-05\"\r\n  },\r\n  \"additionalneeds\" : \"Lunch\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/booking/{{bookingid}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{bookingid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH /booking/{id}",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.sendRequest({\r",
							"    url: pm.environment.get(\"base_url\") + \"/auth\",\r",
							"    method: \"POST\",\r",
							"    header: {\r",
							"        \"Content-Type\": \"application/json\"\r",
							"    },\r",
							"    body: {\r",
							"        mode: \"raw\",\r",
							"        raw: JSON.stringify({\r",
							"            \"username\": \"admin\",\r",
							"            \"password\": \"password123\"\r",
							"        })\r",
							"    }\r",
							"}, function (err, res) {\r",
							"    if (!err) {\r",
							"        let json = res.json();\r",
							"        if (json.token) {\r",
							"            pm.environment.set(\"authToken\", json.token);\r",
							"            console.log(\"New Token set: \" + json.token);\r",
							"        } else {\r",
							"            console.log(\"Auth token not found in response\");\r",
							"        }\r",
							"    } else {\r",
							"        console.log(\"Error fetching token: \" + err);\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains updated field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.firstname).to.eql(\"Eric\"); \r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "token={{authToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"firstname\" : \"Eric\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/booking/3",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE /booking/{id}",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.sendRequest({\r",
							"    url: pm.environment.get(\"base_url\") + \"/auth\",\r",
							"    method: \"POST\",\r",
							"    header: {\r",
							"        \"Content-Type\": \"application/json\"\r",
							"    },\r",
							"    body: {\r",
							"        mode: \"raw\",\r",
							"        raw: JSON.stringify({\r",
							"            \"username\": \"admin\",\r",
							"            \"password\": \"password123\"\r",
							"        })\r",
							"    }\r",
							"}, function (err, res) {\r",
							"    if (!err) {\r",
							"        let json = res.json();\r",
							"        if (json.token) {\r",
							"            pm.environment.set(\"authToken\", json.token);\r",
							"            console.log(\"New Token set: \" + json.token);\r",
							"        } else {\r",
							"            console.log(\"Auth token not found in response\");\r",
							"        }\r",
							"    } else {\r",
							"        console.log(\"Error fetching token: \" + err);\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 (Deleted)\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{authToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/booking/{{bookingid}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{bookingid}}"
					]
				}
			},
			"response": []
		}
	]
}