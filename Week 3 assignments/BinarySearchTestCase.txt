using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace BinarySearchTests
{
    /// <summary>
    /// Contains unit tests that verify exception handling behavior of <see cref="Array.BinarySearch(Array, object)"/>.
    /// </summary>
    [TestClass]
    public class BinarySearchExceptionTests
    {
        /// <summary>
        /// TC_EX_01: Verifies that passing a null array throws an <see cref="ArgumentNullException"/>.
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(ArgumentNullException))]
        public void BinarySearch_NullArray_ThrowsArgumentNullException()
        {
            int[] array = null;
            int value = 3;

            Array.BinarySearch(array, value);
        }

        /// <summary>
        /// TC_EX_02: Verifies that passing a multidimensional array throws a <see cref="RankException"/>.
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(RankException))]
        public void BinarySearch_MultidimensionalArray_ThrowsRankException()
        {
            int[,] array = { { 1, 2 }, { 3, 4 } }; // 2D array
            int value = 3;

            Array.BinarySearch(array, value);
        }

        /// <summary>
        /// TC_EX_03: Verifies that searching an array with an incompatible type throws an <see cref="InvalidOperationException"/>.
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(InvalidOperationException))]
        public void BinarySearch_IncompatibleType_ThrowsInvalidOperationException()
        {
            string[] array = { "a", "b", "c" };
            int value = 3;

            Array.BinarySearch(array, value);
        }

        /// <summary>
        /// TC_EX_04: Verifies that using objects that do not implement <see cref="IComparable"/> throws an <see cref="InvalidOperationException"/>.
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(InvalidOperationException))]
        public void BinarySearch_NonComparableObject_ThrowsInvalidOperationException()
        {
            NonComparable[] array = { new NonComparable(), new NonComparable() };
            var value = new NonComparable();

            Array.BinarySearch(array, value);
        }

        /// <summary>
        /// TC_EX_05: Verifies that using an unsorted array does not throw an exception, but returns unpredictable results.
        /// </summary>
        [TestMethod]
        public void BinarySearch_UnsortedArray_ResultMayBeUnpredictable()
        {
            int[] array = { 5, 1, 3, 2, 4 }; // Not sorted
            int value = 3;

            int result = Array.BinarySearch(array, value);

            Console.WriteLine($"Searching {value} in unsorted array: result = {result}");

            // Warning the developer, not failing the test
            Assert.Inconclusive("BinarySearch behavior on unsorted arrays is unpredictable.");
        }

        /// <summary>
        /// Helper class that does not implement <see cref="IComparable"/>, used to test invalid BinarySearch inputs.
        /// </summary>
        private class NonComparable
        {
            /// <summary>
            /// Gets a sample ID for demonstration purposes.
            /// </summary>
            public int Id => 1;
        }
    }
}
